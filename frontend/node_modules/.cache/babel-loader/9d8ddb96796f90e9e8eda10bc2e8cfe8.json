{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gilos\\\\MERN-Blog-App\\\\frontend\\\\src\\\\components\\\\Login.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport GoogleLogin from \"react-google-login\";\nimport TwitterLogin from \"react-twitter-login\";\ndotenv.config();\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.twitterAuthHandler = (err, data) => {\n      if (err) {\n        window.location = \"/login\";\n      } else {\n        const user = {\n          username: data.screen_name,\n          socialId: data.user_id\n        };\n        axios.post(`${baseURL}/auth/login`, user).then(res => {\n          let count = 0;\n\n          if (res.data.socialId) {\n            sessionStorage.setItem(\"isLoggedIn\", \"true\");\n            sessionStorage.setItem(\"username\", res.data.username);\n            count++;\n            window.setTimeout(() => {\n              sessionStorage.removeItem(\"isLoggedIn\");\n              sessionStorage.removeItem(\"username\");\n            }, 24 * 60 * 60 * 60);\n\n            if (count === 1) {\n              window.location.reload();\n            }\n          } else {\n            window.location = \"/login\";\n          }\n        }).catch(err => console.error(err));\n      }\n    };\n  }\n\n  //After logging in, redirect to previous page\n  componentDidMount() {\n    if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\n      window.history.back();\n    }\n  } // Google login success callback\n\n\n  successGoogleLogin(response) {\n    // Create an instance of the user\n    const user = {\n      username: response.profileObj.name,\n      socialId: response.googleId\n    }; // Make an API call to either findOrCreate the user\n\n    axios.post(`${baseURL}/auth/login`, user).then(res => {\n      // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\n      let count = 0; // If the response has a valid social Id\n\n      if (res.data.socialId === response.googleId) {\n        // Set the username and isLoggedIn in the session storage\n        sessionStorage.setItem(\"isLoggedIn\", \"true\");\n        sessionStorage.setItem(\"username\", res.data.username);\n        count++; // Remove the user session cookie after 24 hours, to log the user out.\n        // This is for cases when the user doesn't end the session or doesn't logout\n\n        window.setTimeout(() => {\n          sessionStorage.removeItem(\"isLoggedIn\");\n          sessionStorage.removeItem(\"username\");\n        }, 24 * 60 * 60 * 60); // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\n\n        if (count === 1) {\n          window.location.reload();\n        }\n      } // If user data returned is invalid, then redirect to the login page once again\n      else {\n          window.location = \"/login\";\n        }\n    }).catch(err => console.error(err));\n  } // Twitter login success callback\n  // Very similar to the previous google login callback\n\n\n  // Google login failure callback\n  failureGoogleLogin(response) {\n    console.error(response);\n    window.location = \"/login\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, \"Login with your social account\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"full-stop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \".\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"gold-hr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n      buttonText: \"Log in With Google\",\n      onSuccess: this.successGoogleLogin,\n      onFailure: this.failureGoogleLogin,\n      cookiePolicy: \"single_host_origin\",\n      scope: \"profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/gilos/MERN-Blog-App/frontend/src/components/Login.js"],"names":["React","axios","dotenv","GoogleLogin","TwitterLogin","config","baseURL","process","env","REACT_APP_BASEURL","Login","Component","twitterAuthHandler","err","data","window","location","user","username","screen_name","socialId","user_id","post","then","res","count","sessionStorage","setItem","setTimeout","removeItem","reload","catch","console","error","componentDidMount","getItem","history","back","successGoogleLogin","response","profileObj","name","googleId","failureGoogleLogin","render","REACT_APP_GOOGLE_CLIENT_ID"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\n\r\nimport GoogleLogin from \"react-google-login\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\n\r\ndotenv.config();\r\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\r\n\r\nclass Login extends React.Component {\r\n    //After logging in, redirect to previous page\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem(\"isLoggedIn\") === \"true\") {\r\n            window.history.back();\r\n        }\r\n    }\r\n\r\n    // Google login success callback\r\n    successGoogleLogin(response) {\r\n        // Create an instance of the user\r\n        const user = {\r\n            username: response.profileObj.name,\r\n            socialId: response.googleId,\r\n        };\r\n\r\n        // Make an API call to either findOrCreate the user\r\n        axios\r\n            .post(`${baseURL}/auth/login`, user)\r\n            .then((res) => {\r\n                // Reload the page once count is 1 to reload the navbar component and display \"Logout\" as an option instead of \"Login\"\r\n                let count = 0;\r\n\r\n                // If the response has a valid social Id\r\n                if (res.data.socialId === response.googleId) {\r\n                    // Set the username and isLoggedIn in the session storage\r\n                    sessionStorage.setItem(\"isLoggedIn\", \"true\");\r\n                    sessionStorage.setItem(\"username\", res.data.username);\r\n                    count++;\r\n\r\n                    // Remove the user session cookie after 24 hours, to log the user out.\r\n                    // This is for cases when the user doesn't end the session or doesn't logout\r\n                    window.setTimeout(() => {\r\n                        sessionStorage.removeItem(\"isLoggedIn\");\r\n                        sessionStorage.removeItem(\"username\");\r\n                    }, 24 * 60 * 60 * 60);\r\n\r\n                    // If user data is stored in the session Storage, then reload page to update Navbar component appropriately\r\n                    if (count === 1) {\r\n                        window.location.reload();\r\n                    }\r\n                }\r\n                // If user data returned is invalid, then redirect to the login page once again\r\n                else {\r\n                    window.location = \"/login\";\r\n                }\r\n            })\r\n            .catch((err) => console.error(err));\r\n    }\r\n\r\n    // Twitter login success callback\r\n    // Very similar to the previous google login callback\r\n    twitterAuthHandler = (err, data) => {\r\n        if (err) {\r\n            window.location = \"/login\";\r\n        } else {\r\n            const user = {\r\n                username: data.screen_name,\r\n                socialId: data.user_id,\r\n            };\r\n\r\n            axios\r\n                .post(`${baseURL}/auth/login`, user)\r\n                .then((res) => {\r\n                    let count = 0;\r\n\r\n                    if (res.data.socialId) {\r\n                        sessionStorage.setItem(\"isLoggedIn\", \"true\");\r\n                        sessionStorage.setItem(\"username\", res.data.username);\r\n                        count++;\r\n\r\n                        window.setTimeout(() => {\r\n                            sessionStorage.removeItem(\"isLoggedIn\");\r\n                            sessionStorage.removeItem(\"username\");\r\n                        }, 24 * 60 * 60 * 60);\r\n\r\n                        if (count === 1) {\r\n                            window.location.reload();\r\n                        }\r\n                    } else {\r\n                        window.location = \"/login\";\r\n                    }\r\n                })\r\n                .catch((err) => console.error(err));\r\n        }\r\n    };\r\n\r\n    // Google login failure callback\r\n    failureGoogleLogin(response) {\r\n        console.error(response);\r\n        window.location = \"/login\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"login\">\r\n                    <h5>\r\n                        Login with your social account\r\n                        <span className=\"full-stop\">.</span>\r\n                    </h5>\r\n                    <hr className=\"gold-hr\" />\r\n                    <div className=\"google\">\r\n                        <GoogleLogin\r\n                            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n                            buttonText=\"Log in With Google\"\r\n                            onSuccess={this.successGoogleLogin}\r\n                            onFailure={this.failureGoogleLogin}\r\n                            cookiePolicy={\"single_host_origin\"}\r\n                            scope=\"profile\"\r\n                        />\r\n                    </div>\r\n                    \r\n                \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}